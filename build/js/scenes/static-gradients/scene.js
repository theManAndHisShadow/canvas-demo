(()=>{"use strict";let e=new class{constructor({title:e,ui:t,code:i}){this.displayName="Scene",this.title=e,this.uiTree=t,this.ui=null,this.code=i,this.timestamp=null}execute({root:e}){let t=this.code;e.children[0].textContent=this.title,t(e,this.ui.display,this.ui.states)}}({title:"Static gradients",ui:{description:{type:"display-infobox",label:"Description",text:"Using built-in methods for drawing gradients obviously shows itself much better, compared to custom functions for rendering pixel by pixel."},executeTime:{type:"display-item",label:"Gradient rendered in"},gradientRenderingMethod:{type:"option-selector",label:"Gradient rendering method",optionNames:["pixel-by-pixel","built-in"],defaultValue:0},gradientTypeSelector:{type:"option-selector",label:"Gradient type",optionNames:["linear","conical","radial","multicolor"],defaultValue:1},regenerate:{type:"main-action-button",text:"Generate gradient"}},code:(e,i,r)=>{window.runningAnimations.clearQueue();const a=Date.now();let o=resetElement(e.querySelector("canvas"),`canvas-${a}`);o.width=600,o.height=400;const n=o.getContext("2d");let l=(e,r)=>{n.clearRect(0,0,600,400);let a=function(e,...t){const i=performance.now();return e(...t),performance.now()-i}(t,n,{type:r,method:e,width:600,height:400,color1:[getRandomNumber(0,255),getRandomNumber(0,255),getRandomNumber(0,255)],color2:[getRandomNumber(0,255),getRandomNumber(0,255),getRandomNumber(0,255)]}),o=a<1?"green-word-bubble":"yellow-word-bubble";i.updateValue("executeTime",`<i class='${o}'>${a.toFixed(1)} ms.</i>`)};r.setState("gradientRenderingMethod",0),r.setState("gradientTypeSelector",0),l(r.getState("gradientRenderingMethod"),r.getState("gradientTypeSelector")),r.subscribe(((e,t,i)=>{"regenerate"==e&&l(r.getState("gradientRenderingMethod"),r.getState("gradientTypeSelector"))}))}});function t(e,{color1:t,color2:i,width:r,height:a,type:o,method:n=1}){if(0==n){const n=e.createImageData(r,a),l=i[0]-t[0],d=i[1]-t[1],c=i[2]-t[2];let s=[0,0,0];for(let e=0;e<a;e++)for(let i=0;i<r;i++){const g=4*(e*r+i);let u;if(0==o?u=i/r:1==o?u=getNormalizedAngle(r/2,a/2,i,e):2==o&&(u=getDistanseBetweenTwoPoint(r/2,a/2,i,e)*(a/2)/100/200),3==o){let t=getNormalizedAngle(r/2,a/2,i,e);t<1/6?(s[0]=255,s[1]=Math.round(6*t*255),s[2]=0):t<2/6?(s[0]=Math.round(255-6*(t-1/6)*255),s[1]=255,s[2]=0):t<.5?(s[0]=0,s[1]=255,s[2]=Math.round(6*(t-2/6)*255)):t<4/6?(s[0]=0,s[1]=Math.round(255-6*(t-.5)*255),s[2]=255):t<5/6?(s[0]=Math.round(6*(t-4/6)*255),s[1]=0,s[2]=255):(s[0]=255,s[1]=0,s[2]=Math.round(255-6*(t-5/6)*255))}else s[0]=t[0]+l*u,s[1]=t[1]+d*u,s[2]=t[2]+c*u;n.data[g]=s[0],n.data[g+1]=s[1],n.data[g+2]=s[2],n.data[g+3]=255}e.putImageData(n,0,0)}else{let n;if(0==o?n=e.createLinearGradient(0,0,r,0):1==o?n=e.createConicGradient(0,r/2,a/2):2==o&&(n=e.createRadialGradient(r/2,a/2,20,r/2,a/2,a/2)),3==o){n=e.createConicGradient(300,r/2,a/2);let t=["red","rgb(251, 0, 84)","rgb(211, 0, 255)","rgb(160, 0, 255)","blue","rgb(17, 130, 255)","rgb(34, 255, 10)","yellow","orange","red"];t.forEach(((e,i)=>{let r=1/t.length*i;n.addColorStop(r,e)}))}else n.addColorStop(0,`rgba(${t}, 1)`),n.addColorStop(1,`rgba(${i}, 1)`);e.fillStyle=n,e.fillRect(0,0,r,a)}}window.exportedObjects.push(e)})();