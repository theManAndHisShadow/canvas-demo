(()=>{"use strict";class e{constructor(e){this.renderer=e||null,this.parent=null}}class t extends e{constructor(e,t,i,r,s="white"){super(),this.x=t,this.y=i,this.planeX=null,this.planeY=null,this.color=r,this.label=e,this.labelColor=s}draw(){this.label&&this.label.length>0&&drawText(this.renderer,{x:this.x+7,y:this.y-7,text:this.label,color:this.labelColor}),drawCircle(this.renderer,{cx:this.x,cy:this.y,fillColor:this.color,borderColor:this.color,r:2})}}class i extends e{constructor(e,i,r,s=2){super(),this.startPoint=new t(e[0],e[1],e[2],r),this.endPoint=new t(i[0],i[1],i[2],r),this.color=r,this.thickness=s,this.length=getDistanseBetweenTwoPoint(e[1],e[2],i[1],i[2])}draw(){drawLine(this.renderer,{x1:this.startPoint.x,y1:this.startPoint.y,x2:this.endPoint.x,y2:this.endPoint.y,thickness:this.thickness,color:this.startPoint.color}),this.startPoint.draw(),this.endPoint.draw()}}class r{constructor(){}detect(e){let t="unknown";return t=/x\^3/g.test(e)?"cubic":/x\^2/g.test(e)?"quadratic":/e\^\{?\-?(\d+\/?\d+|0\.\d{1,})?x\}?/g.test(e)?"exponential":/\/\d?x/g.test(e)?"hyperbolic":"linear",t}parse(e,t){let i={};const r=new RegExp("(?<!{)([+-])+","gm");let s=e.split(r);const n=e=>(e=/(\{|\})/gm.test(e)?e.replace(/(\{|\})/gm,""):e,/\//g.test(e)?Number(fractionToDecimal(e).toFixed(5)):e);if("linear"==t){let e=0,t=0;s.forEach(((i,l)=>{if(i.trim().length>0&&!r.test(i)){let r=l>0&&"-"===s[l-1]?-1:1;/x/.test(i)?(e=i.split("x")[0]||1,e=n(e)*r):t=n(i)*r}})),i={a:e,b:t}}else if("hyperbolic"==t){let e=0,t=0,r=0;s.forEach(((i,l)=>{if(i.trim().length>0&&!/[+-]/.test(i)){let o=l>0&&"-"===s[l-1]?-1:1;/\/\d{0,}x/.test(i)?(e=Number(i.split("/")[0]||1),t=(i.split("/")[1]||1).replace("x",""),t=(""==t?1:Number(t))*o):r=n(i)*o}})),i={a:e,b:t,c:r}}else if("quadratic"==t){let e=0,t=0,r=0;s.forEach(((i,l)=>{if(i.trim().length>0&&!/[+-]/.test(i)){let o=l>0&&"-"===s[l-1]?-1:1;/x\^2/.test(i)?(e=i.split("x")[0]||1,e=n(e)*o):/x/.test(i)?(t=i.split("x")[0]||1,t=n(t)*o):r=n(i)*o}})),i={a:e,b:t,c:r}}else if("cubic"==t){let e=0,t=0,r=0,l=0;s.forEach(((i,o)=>{if(i.trim().length>0&&!/[+-]/.test(i)){let h=o>0&&"-"===s[o-1]?-1:1;/x\^3/.test(i)?(e=i.split("x")[0]||1,e=n(e)*h):/x\^2/.test(i)?(t=i.split("x")[0]||1,t=n(t)*h):/x/.test(i)?(r=i.split("x")[0]||1,r=n(r)*h):l=n(i)*h}})),i={a:e,b:t,c:r,d:l}}else if("exponential"==t){let e=0,t=0,l=0;s.forEach(((i,o)=>{if(i.trim().length>0&&!r.test(i))if(/e\^\{?/g.test(i)){let r=o>0&&"-"===s[o-1]?-1:1;e=i.split("e")[0]||1,e=n(e)*r;let l=i.split("e^")[1].split("x")[0].replace(/\{?/g,"")||1,h=!0===/\-/g.test(l)?-1:1;t="string"==typeof l?l.replace(/\-?/,""):l,t=(n(t)||1)*h}else{let e=o>0&&"-"===s[o-1]?-1:1;l=n(i)*e}})),i={a:e,b:t,c:l}}return i}findRoots(e,t){let i=[];if("linear"==e){let e=0,r=-1*t.b/t.a;i.push({x:r,y:e})}else if("quadratic"==e){const e=t.a,r=t.b,s=r**2-4*e*t.c;if(s>0){let t=(-r+Math.sqrt(s))/(2*e),n=(-r-Math.sqrt(s))/(2*e);i.push({x:t,y:0}),i.push({x:n,y:0})}else if(0===s){let t=-r/(2*e);i.push({x:t,y:0})}else{let t=-r/(2*e),n=Math.sqrt(-s)/(2*e);i.push({x:t,y:n}),i.push({x:t,y:-n})}}else if("cubic"==e){const e=t.a,r=t.b,s=t.c,n=(3*e*s-r**2)/(3*e**2),l=(2*r**3-9*e*r*s+27*e**2*t.d)/(27*e**3),o=l**2/4+n**3/27;if(o>0){const t=Math.cbrt(-l/2+Math.sqrt(o))+Math.cbrt(-l/2-Math.sqrt(o))-r/(3*e);i.push({x:t,y:0})}else if(0===o){const t=Math.cbrt(-l/2),s=2*t-r/(3*e),n=-t-r/(3*e);i.push({x:s,y:0}),i.push({x:n,y:0})}else{const t=Math.sqrt((-1*n)**3/27),s=Math.acos(-l/(2*t)),o=2*Math.cbrt(t)*Math.cos(s/3)-r/(3*e),h=2*Math.cbrt(t)*Math.cos((s+2*Math.PI)/3)-r/(3*e),a=2*Math.cbrt(t)*Math.cos((s+4*Math.PI)/3)-r/(3*e);i.push({x:o,y:0}),i.push({x:h,y:0}),i.push({x:a,y:0})}}else if("hyperbolic"==e);else if("exponential"==e){const{a:e,b:r,c:s}=t;if(0!==e&&-s/e>0){let t=Math.log(-s/e)/r;i.push({x:t,y:0})}}return i}}class s extends e{constructor(e=null,t="red"){super(),this.processor=new r,this.parent=null,this.formula=e,this.type=this.processor.detect(this.formula),this.parsed=this.processor.parse(this.formula,this.type),this.roots=this.processor.findRoots(this.type,this.parsed),this.color=t}#e(e=1){this.renderer.beginPath(),this.renderer.strokeStyle=this.color,this.renderer.lineWidth=1;let t,i,r=!0;for(let s=this.parent.visibleArea.x[0]-3;s<this.parent.visibleArea.x[1]+3;s+=e){let e=s,n=this.parsed.a*e+this.parsed.b,l=e*(2*this.parent.gridCellSize)+this.parent.subpixel,o=n*(2*this.parent.gridCellSize)+this.parent.subpixel,h={x:this.parent.cx+l,y:this.parent.cy-o};r?(this.renderer.moveTo(h.x,h.y),r=!1):this.renderer.lineTo(h.x,h.y),t=h.x,i=h.y}this.renderer.closePath(),this.renderer.stroke()}#t(e=1){this.renderer.beginPath(),this.renderer.strokeStyle=this.color,this.renderer.lineWidth=1;let t=!1;for(let i=this.parent.visibleArea.x[0]-3;i<this.parent.visibleArea.x[1]+3;i+=e){let e=i,r=this.parsed.a*e**2+this.parsed.b*e+this.parsed.c,s=e*(2*this.parent.gridCellSize)+this.parent.subpixel,n=r*(2*this.parent.gridCellSize)+this.parent.subpixel,l={x:this.parent.cx+s,y:this.parent.cy-n};l.x<0||l.x>this.parent.viewWidth?t&&(this.renderer.stroke(),this.renderer.closePath(),t=!1):t?this.renderer.lineTo(l.x,l.y):(this.renderer.beginPath(),this.renderer.moveTo(l.x,l.y),t=!0)}t&&(this.renderer.stroke(),this.renderer.closePath())}#i(e=1){this.renderer.beginPath(),this.renderer.strokeStyle=this.color,this.renderer.lineWidth=1;let t=!1;for(let i=this.parent.visibleArea.x[0]-3;i<this.parent.visibleArea.x[1]+3;i+=e){let e=i,r=this.parsed.a*e**3+this.parsed.b*e**2+this.parsed.c*e+this.parsed.d,s=e*(2*this.parent.gridCellSize)+this.parent.subpixel,n=r*(2*this.parent.gridCellSize)+this.parent.subpixel,l={x:this.parent.cx+s,y:this.parent.cy-n};l.x<0||l.x>this.parent.viewWidth?t&&(this.renderer.stroke(),this.renderer.closePath(),t=!1):t?this.renderer.lineTo(l.x,l.y):(this.renderer.beginPath(),this.renderer.moveTo(l.x,l.y),t=!0)}t&&(this.renderer.stroke(),this.renderer.closePath())}#r(e=1){this.renderer.beginPath(),this.renderer.strokeStyle=this.color,this.renderer.lineWidth=1;let t=!1;for(let i=this.parent.visibleArea.x[0]-3;i<this.parent.visibleArea.x[1]+3;i+=e){let e=i;if(Math.abs(e)<.001)continue;let r=this.parsed.a/(this.parsed.b*e)+this.parsed.c,s=e*(2*this.parent.gridCellSize)+this.parent.subpixel,n=r*(2*this.parent.gridCellSize)+this.parent.subpixel,l={x:this.parent.cx+s,y:this.parent.cy-n};l.x<0||l.x>this.parent.viewWidth?t&&(this.renderer.stroke(),this.renderer.closePath(),t=!1):t?this.renderer.lineTo(l.x,l.y):(this.renderer.beginPath(),this.renderer.moveTo(l.x,l.y),t=!0)}t&&(this.renderer.stroke(),this.renderer.closePath()),t=!1;for(let i=e;i<this.parent.visibleArea.x[1]+3;i+=e){let e=i,r=this.parsed.a/(this.parsed.b*e)+this.parsed.c,s=e*(2*this.parent.gridCellSize)+this.parent.subpixel,n=r*(2*this.parent.gridCellSize)+this.parent.subpixel,l={x:this.parent.cx+s,y:this.parent.cy-n};l.x<0||l.x>this.parent.viewWidth?t&&(this.renderer.stroke(),this.renderer.closePath(),t=!1):t?this.renderer.lineTo(l.x,l.y):(this.renderer.beginPath(),this.renderer.moveTo(l.x,l.y),t=!0)}t&&(this.renderer.stroke(),this.renderer.closePath())}#s(e=1){this.renderer.beginPath(),this.renderer.strokeStyle=this.color,this.renderer.lineWidth=1;let t=!1;for(let i=this.parent.visibleArea.x[0]-4;i<this.parent.visibleArea.x[1]+4;i+=e){let e=i,r=(this.parsed.a*Math.exp(this.parsed.b*e)+this.parsed.c)*(2*this.parent.gridCellSize)+this.parent.subpixel,s=e*(2*this.parent.gridCellSize)+this.parent.subpixel,n={x:this.parent.cx+s,y:this.parent.cy-r},l=5*this.parent.gridCellSize;n.x<0||n.x>this.parent.viewWidth||n.y<0-l||n.y>this.parent.viewHeight+l?t&&(this.renderer.stroke(),this.renderer.closePath(),t=!1):t?this.renderer.lineTo(n.x,n.y):(this.renderer.beginPath(),this.renderer.moveTo(n.x,n.y),t=!0)}t&&(this.renderer.stroke(),this.renderer.closePath())}draw(){"linear"==this.type&&this.#e(.1),"quadratic"==this.type&&this.#t(.1),"cubic"==this.type&&this.#i(.1),"hyperbolic"==this.type&&this.#r(.001),"exponential"==this.type&&this.#s(.075)}}class n{constructor(){this.events={}}addEventListener(e,t){this.events[e]||(this.events[e]=[]),this.target=this,this.events[e].push(t)}dispatchEvent(e,t){this.events[e]&&this.events[e].forEach((e=>e(t)))}}class l extends n{#n=[];constructor({cx:e,cy:t,renderer:i,gridCellSize:r=10,gridLineColor:s="black",gridLineThickness:n=1,fillColor:l="white",axisColor:o="black"}){super(),this.cx=e,this.cy=t,this.globalOffset={x:0,y:0},this.visibleArea={x:[0,0],y:[0,0]},this.renderer=i,this.viewWidth=i.canvas.width,this.viewHeight=i.canvas.height,this.gridCellSize=r,this.gridLineColor=s,this.gridLineThickness=n,this.axisColor=o,this.fillColor=l,this.subpixel=.5}move(e,r=1){let s=Math.round(e.x*r),n=Math.round(e.y*r);this.cx=this.cx+s,this.cy=this.cy+n,this.globalOffset.x=this.globalOffset.x+s,this.globalOffset.y=this.globalOffset.y+n,this.#n.forEach((e=>{e instanceof t?(e.x=e.x+s,e.y=e.y+n):e instanceof i&&(e.startPoint.x=e.startPoint.x+s,e.startPoint.y=e.startPoint.y+n,e.endPoint.x=e.endPoint.x+s,e.endPoint.y=e.endPoint.y+n)}))}moveToOrigin(){this.cx=this.viewWidth/2,this.cy=this.viewHeight/2,this.#n.forEach((e=>{e instanceof t?(e.x=e.x-this.globalOffset.x,e.y=e.y-this.globalOffset.y):e instanceof i&&(e.startPoint.x=e.startPoint.x-this.globalOffset.x,e.startPoint.y=e.startPoint.y-this.globalOffset.y,e.endPoint.x=e.endPoint.x-this.globalOffset.x,e.endPoint.y=e.endPoint.y-this.globalOffset.y)})),this.globalOffset={x:0,y:0}}drawAxis(){this.renderer.strokeStyle=this.axisColor,this.renderer.lineWidth=1,this.renderer.beginPath(),this.renderer.moveTo(0,this.cy+this.subpixel),this.renderer.lineTo(this.viewWidth,this.cy+this.subpixel),this.renderer.stroke(),this.renderer.beginPath(),this.renderer.moveTo(this.cx+this.subpixel,0),this.renderer.lineTo(this.cx+this.subpixel,this.viewHeight),this.renderer.stroke(),this.renderer.closePath()}drawGrid(){const e=this.viewWidth,t=this.viewHeight,i=this.gridLineColor,r=i.split(", ").map((e=>Number(e.replace(/(\(|\)|rgba|rgb)/gm,"")))),s="rgba("+r.map(((e,t)=>3==t&&e<=1?r[t]+.45:e))+")";this.renderer.lineWidth=this.gridLineThickness;const n=(r,n)=>{if(this.renderer.beginPath(),this.renderer.strokeStyle=s,"column"===n){let e=r+2*this.gridCellSize+this.subpixel;this.renderer.moveTo(e,0),this.renderer.lineTo(e,t)}else if("row"===n){let t=r+this.subpixel;this.renderer.moveTo(0,t),this.renderer.lineTo(e,t)}this.renderer.stroke(),this.renderer.closePath(),this.renderer.beginPath(),this.renderer.strokeStyle=i;for(let i=3;i<=5;i++)if("column"===n){let e=r+this.gridCellSize*i+this.subpixel;this.renderer.moveTo(e,0),this.renderer.lineTo(e,t)}else if("row"===n){let t=r+this.gridCellSize*(i-2)+this.subpixel;this.renderer.moveTo(0,t),this.renderer.lineTo(e,t)}this.renderer.stroke(),this.renderer.closePath()},l=4*this.gridCellSize;let o=this.cx-e/2,h=Math.trunc(this.globalOffset.x/l),a=e/l-h;for(let e=-1-h;e<a;e++){let t=o+e*l,i=2*(e-7);n(t,"column"),drawText(this.renderer,{x:t+l/2,y:this.cy-10,text:0==i?"":i,fontSize:11}),e==-1-h&&(this.visibleArea.x[0]=i+2),e==a-1&&(this.visibleArea.x[1]=i)}let d=this.cy-t/2,c=Math.trunc(this.globalOffset.y/l),p=-1-c,x=t/l-c+1;for(let e=p;e<x;e++){let t=d+e*l,i=2*(e-5)*-1;n(t,"row"),drawText(this.renderer,{x:this.cx-7,y:0==i?t+12:t+1,text:i,fontSize:11,align:"right"}),e==p&&(this.visibleArea.y[0]=i-2),e==x-1&&(this.visibleArea.y[1]=i)}}add(e){e.renderer=this.renderer;const r=e=>{e.planeX=e.x,e.planeY=e.y;let t=this.cx+e.x*(2*this.gridCellSize)+this.globalOffset.x+this.subpixel,i=this.cy-e.y*(2*this.gridCellSize)+this.globalOffset.y+this.subpixel;e.x=t,e.y=i};e instanceof t?r(e):e instanceof i?(e.startPoint.renderer=this.renderer,r(e.startPoint),e.endPoint.renderer=this.renderer,r(e.endPoint),e.parent=this):e instanceof s&&(e.parent=this),this.#n.push(e)}clearContent(){this.#n=[],this.render()}fill(){drawRect(this.renderer,{x:0,y:0,width:this.viewWidth,height:this.viewHeight,fillColor:this.fillColor})}render(){this.fill(),this.drawGrid(),this.drawAxis(),this.#n.length>0&&this.#n.forEach((e=>{e.draw()})),this.dispatchEvent("redraw")}}let o=new class{constructor({title:e,ui:t,code:i}){this.displayName="Scene",this.title=e,this.uiTree=t,this.ui=null,this.code=i,this.timestamp=null}execute({root:e}){let t=this.code;e.children[0].textContent=this.title,t(e,this.ui.display,this.ui.states)}}({title:"Cartesian plane demo",ui:{description:{type:"display-infobox",label:"Description",text:"Cartesian coordinate system in a plane is a coordinate system that specifies each point uniquely by a pair of real numbers called coordinates, which are the signed distances to the point from two fixed perpendicular oriented lines, called coordinate lines or coordinate axes."},centerViewAction:{type:"button",text:"reset",label:"Center view"},selectedPreset:{type:"preset-dropdown-list",label:"Preset",selectedByDefault:0,options:[{name:"Single points",allowedElements:["*"]},{name:"Segments",allowedElements:["*"]},{name:"Line",allowedElements:["*"]},{name:"Quadratic parabola",allowedElements:["*"]},{name:"Cubic parabola",allowedElements:["*"]},{name:"Hyperbola",allowedElements:["*"]},{name:"Exponential curve",allowedElements:["*"]}]}},code:(e,r,n)=>{window.runningAnimations.clearQueue();const o=Date.now();let h=resetElement(e.querySelector("canvas"),`canvas-${o}`);h.width=600,h.height=400;const a=h.getContext("2d"),d=new l({renderer:a,cx:300,cy:200,gridCellSize:10,gridLineColor:"rgba(35, 35, 35, 0.35)",gridLineThickness:1,axisColor:"white",fillColor:"black"});d.render();let c=!1,p={x:0,y:0},x={x:0,y:0};h.addEventListener("mousemove",(e=>{if(c){let t=getMousePos(h,e);x={x:t.x-p.x,y:t.y-p.y},p=t,d.move(x,1),d.render()}})),h.addEventListener("mousedown",(e=>{c=!0;let t=getMousePos(h,e);p={x:t.x,y:t.y},h.style.cursor="grab",setTimeout((()=>{h.style.cursor="grabbing"}),120)})),h.addEventListener("mouseup",(()=>{c=!1,h.style.cursor="inherit"}));let b="";d.addEventListener("redraw",(()=>{b=`\n                <br/> \n                - x-axis - [${d.visibleArea.x}], <br/> \n                - y-axis - [${d.visibleArea.y[0]-2}, ${d.visibleArea.y[1]}].\n            `,r.isExist("visibleArea")&&r.updateValue("visibleArea",b)})),n.subscribe(((e,n,l)=>{if("centerViewAction"==e&&(d.moveToOrigin(),d.render()),"selectedPreset"==e){if(d.moveToOrigin(),d.clearContent(),r.removeDynamicllyRendered(),0==n)[new t("O",0,0,"white"),new t("A",2,2,getColor("orange"),getColor("red")),new t("B",-2,2,getColor("lime"),getColor("green")),new t("C",-2,-2,getColor("purple"),getColor("deepPurple")),new t("D",2,-2,getColor("blue"),getColor("indigo"))].forEach((e=>{d.add(e),r.dynamicRender(`point${e.label}`,{type:"display-item",label:`- point <span style="font-weight: bold">${e.label}</span>`,text:`<i style="font-size: 15px">(${e.planeX}, ${e.planeY})</i>`})}));else if(1==n){const e=1;[new t("O",0,0,"white"),new i(["A",-5.5,2],["B",-1.5,2],"#ff0000",e),new i(["B",-1.5,2],["C",0,6],"#ff7f00",e),new i(["C",0,6],["D",1.5,2],"#ffff00",e),new i(["D",1.5,2],["E",5.5,2],"#7fff00",e),new i(["E",5.5,2],["F",2,0],"cyan",e),new i(["F",2,0],["G",3.5,-4],"#007fff",e),new i(["G",3.5,-4],["H",0,-2],"blue",e),new i(["H",0,-2],["I",-3.5,-4],"indigo",e),new i(["I",-3.5,-4],["J",-2,0],"magenta",e),new i(["J",-2,0],["A",-5.5,2],"crimson",e)].forEach((e=>{d.add(e),e instanceof t?r.dynamicRender(`point${e.label}`,{type:"display-item",label:`- point <span style="font-weight: bold">${e.label}</span>`,text:`<i style="font-size: 15px">(${e.planeX}, ${e.planeY})</i>`}):e instanceof i&&r.dynamicRender(`segment${e.startPoint.label+e.endPoint.label}`,{type:"display-item",label:`- segment <span style="font-weight: bold; color: black; text-shadow: 0px 0px 3px  ${e.color}; border-radius: 3px;"> ${e.startPoint.label}${e.endPoint.label}</span>`,text:`[ <i style="font-size: 15px">(${e.startPoint.planeX}, ${e.startPoint.planeY}), (${e.endPoint.planeX}, ${e.endPoint.planeY})</i> ]`})}))}else if(n>=2&&n<=6){const e=n-2,t=[[new s("x",getColor("red")),new s("-x",getColor("orange")),new s("{1/3}x",getColor("green")),new s("{-1/3}x",getColor("blue")),new s("3x",getColor("indigo")),new s("-3x",getColor("purple"))],[new s("x^2",getColor("red")),new s("-x^2",getColor("purple")),new s("1/10x^2",getColor("green")),new s("-1/10x^2",getColor("cyan")),new s("0.25x^2-5",getColor("orange")),new s("-0.25x^2+5",getColor("indigo"))],[new s("1/100x^3",getColor("red")),new s("-1/100x^3",getColor("blue")),new s("x^3+3x^2-6",getColor("amber")),new s("-x^3-3x^2+6",getColor("purple"))],[new s("1/x",getColor("red")),new s("-1/x",getColor("purple")),new s("2/x",getColor("amber")),new s("-2/x",getColor("teal")),new s("3/x",getColor("green")),new s("-3/x",getColor("cyan"))],[new s("e^x",getColor("red")),new s("e^{5/10x}",getColor("amber")),new s("e^{3/10x}",getColor("yellow")),new s("e^{2/10x}",getColor("green")),new s("e^1/10x",getColor("blue")),new s("-e^1/10x",getColor("deepPurple"))]];console.log(t[e]),r.dynamicRender("visibleArea",{type:"display-item",label:"Current visible area",text:b}),r.dynamicRender("spacer",{type:"display-spacer"}),r.dynamicRender("function-list-title",{type:"display-item",label:"Function graphs drawn",text:t[e].length}),t[e].forEach(((e,t)=>{var i;d.add(e),r.dynamicRender("function-formula-"+t,{type:"display-float-tile",hideColon:!0,label:(i=e.color,`\n<span style="\n    background: ${changeColorOpacity(i,.75)}; \n    border: 2px solid ${i}; \n    border-radius: 100%;\n    right: 2px;\n    width: 8px;\n    display: block;\n    position: relative;\n    height: 8px;\n"></span>`),text:`ƒ(x) = ${r.renderFormula(e.formula)};`})}))}d.render()}})),n.setState("selectedPreset",0)}});window.exportedObjects.push(o)})();