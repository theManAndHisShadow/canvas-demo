(()=>{"use strict";class e{constructor(){this.events={}}addEventListener(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}dispatchEvent(e,t){this.events[e]&&this.events[e].forEach((e=>e(t)))}}class t extends e{constructor({id:e=null,renderer:t,cx:r,cy:o,r:n,angle:h=.001,direction:l=1,linkedTo:s=null,toothing:d="external",numberOfTeeth:a,tootheHeight:c,role:g="slave",fillColor:y="rgba(255, 255, 255, 0.1)",alternativeFillColor:u,borderColor:x="rgba(255, 255, 255, 1)",alternativeBorderColor:f,borderLineWidth:b=2,devMode:v=!1}){u="string"==typeof u?u:i(d,g,.4),f="string"==typeof f?f:i(d,g,1),super(),this.id=e,this.cx=r,this.cy=o,this.r=n,this.angle=h,this.direction=l,this.rotations=0,this.role=g,this.linkedTo="driver"==g?null:s,this.toothing=d,this.numberOfTeeth=a,this.tootheHeight=c,this.fillColor=y,this.alternativeFillColor=u,this.borderColor=x,this.alternativeBorderColor=f,this.borderLineWidth=b,this.renderer=t,this.devMode=v}getRotationSpeed(e){if(null===this.linkedTo)return 1;const t=e.find((e=>e.id===this.linkedTo));return t.getRotationSpeed(e)*t.direction*(t.numberOfTeeth/this.numberOfTeeth*this.direction)}rotate(e){this.angle+=e,Math.abs(this.angle)>=360&&(this.angle=this.angle%360,this.dispatchEvent("fullRotation"))}#e(){const e=this.devMode?this.alternativeFillColor:this.fillColor,t=this.devMode?this.alternativeBorderColor:this.borderColor;if(drawCircle(this.renderer,{cx:this.cx,cy:this.cy,r:10,fillColor:"driver"==this.role?t:e,borderColor:t,borderThickness:this.borderLineWidth}),"driver"==this.role){let i=this.r/3,r=10,o=4,n={x:this.cx,y:this.cy-i-o},h=rotatePoint(this.cx,this.cy,n.x,n.y,this.angle);drawCircle(this.renderer,{cx:this.cx,cy:this.cy,r:i,fillColor:e,borderColor:t,borderThickness:this.borderLineWidth}),drawLine(this.renderer,{x1:this.cx,y1:this.cy,x2:h.x,y2:h.y,thickness:r,fillColor:t})}if(!0===this.devMode){let e={x:this.cx,y:this.cy-this.r+this.tootheHeight+5},t=rotatePoint(this.cx,this.cy,e.x,e.y,this.angle);drawLine(this.renderer,{x1:this.cx,y1:this.cy,x2:t.x,y2:t.y,thickness:3,color:"driver"==this.role?"red":"white"})}}#t(e=!0){let t=this.r-this.tootheHeight,i=[this.r,this.r,t,t],r=i.length,o=this.numberOfTeeth*r;for(let e=0;e<o;e++){let t=2*Math.PI*e/o,n=i[e%r],h=this.cx+n*Math.cos(t),l=this.cy+n*Math.sin(t),s=rotatePoint(this.cx,this.cy,h,l,this.angle);0==e?this.renderer.moveTo(s.x,s.y):this.renderer.lineTo(s.x,s.y)}!0===e&&this.renderer.closePath()}#i(){const e=this.devMode?this.alternativeBorderColor:this.borderColor,t=this.devMode?this.alternativeFillColor:this.fillColor;this.renderer.beginPath(),this.#t(),this.renderer.fillStyle=t,this.renderer.strokeStyle=e,this.renderer.lineWidth=this.borderLineWidth,this.renderer.fill(),this.renderer.stroke(),this.renderer.closePath()}#r(){const e=this.devMode?this.alternativeBorderColor:this.borderColor,t=this.devMode?this.alternativeFillColor:this.fillColor;if(this.renderer.beginPath(),this.renderer.arc(this.cx,this.cy,this.r+8,0,2*Math.PI),this.#t(),this.renderer.closePath(),this.renderer.fillStyle=t,this.renderer.fill("evenodd"),this.renderer.lineWidth=this.borderLineWidth,this.renderer.strokeStyle=e,this.renderer.stroke(),this.devMode){let e={x:this.cx,y:this.cy+this.r},t=rotatePoint(this.cx,this.cy,e.x,e.y,this.angle);drawLine(this.renderer,{x1:this.cx,y1:this.cy,x2:t.x,y2:t.y,thickness:3,color:"white"})}}render(){"external"==this.toothing?(this.#e(),this.#i()):"internal"==this.toothing&&this.#r()}}function i(e,t,i=1){return"external"===e?"driver"===t?`rgba(255, 152, 0, ${i})`:`rgba(51, 127, 255, ${i})`:`rgba(158, 25, 45, ${i})`}let r=new class{constructor({title:e,ui:t,code:i}){this.displayName="Scene",this.title=e,this.uiTree=t,this.ui=null,this.code=i,this.timestamp=null}execute({root:e}){let t=this.code;e.children[0].textContent=this.title,t(e,this.ui.display,this.ui.states)}}({title:"Spinning gears",ui:{description:{type:"display-infobox",label:"Description",text:"A visual demonstration of the «gear ratio» principle helps you see with your own eyes how gears with different numbers of teeth interact with each other."},dev:{type:"checkbox",label:"Show dev visual",state:!1},rotationSpeed:{type:"input",label:"Rotation speed",minValue:0,maxValue:100,defaultValue:5},selectedPreset:{type:"preset-dropdown-list",label:"Preset",selectedByDefault:0,options:[{name:"Big driver gear",allowedElements:["*"]},{name:"Small driver gear",allowedElements:["*"]},{name:"Chain of equal gears",allowedElements:["*"]},{name:"Chain 1:2:4",allowedElements:["*"]},{name:"Smooth increase",allowedElements:["*"]},{name:"Planetary gearbox",allowedElements:["*"]}]}},code:(e,i,r)=>{window.runningAnimations.clearQueue();const o=Date.now();let n=resetElement(e.querySelector("canvas"),`canvas-${o}`);n.width=600,n.height=400;const h=n.getContext("2d"),l=200.5,s=[[{id:0,role:"driver",cx:361,cy:l,r:170,numberOfTeeth:30,tootheHeight:25},{id:1,linkedTo:0,cx:169,cy:174.5,r:40,numberOfTeeth:5,tootheHeight:18}],[{id:0,role:"driver",cx:169,cy:174.5,r:40,numberOfTeeth:5,tootheHeight:18},{id:1,linkedTo:0,cx:361,cy:l,r:170,numberOfTeeth:30,tootheHeight:25}],[{id:0,role:"driver",cx:484,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:1,linkedTo:0,angle:-35,cx:411,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:2,linkedTo:1,angle:-56,cx:338,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:3,linkedTo:2,angle:-90,cx:264,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:4,linkedTo:3,angle:-138,cx:191,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:5,linkedTo:4,angle:-173,cx:118,cy:l,r:40,numberOfTeeth:13,tootheHeight:10}],[{id:0,role:"driver",cx:531,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:1,linkedTo:0,angle:-16,cx:418,cy:l,r:80,numberOfTeeth:26,tootheHeight:14},{id:2,linkedTo:1,angle:-32,cx:189,cy:l,r:160,numberOfTeeth:52,tootheHeight:14}],[{id:0,role:"driver",cx:531,cy:l,r:40,numberOfTeeth:13,tootheHeight:10},{id:1,linkedTo:0,angle:13,cx:438,cy:l,r:60,numberOfTeeth:20,tootheHeight:12},{id:2,linkedTo:1,angle:7,cx:307,cy:l,r:80,numberOfTeeth:28,tootheHeight:12},{id:3,linkedTo:2,angle:7,cx:136,cy:l,r:100,numberOfTeeth:36,tootheHeight:12}],[{id:0,role:"driver",cx:301,cy:l,r:80,numberOfTeeth:28,tootheHeight:13},{id:1,linkedTo:0,cx:203,cy:273.5,r:50,numberOfTeeth:15,tootheHeight:14},{id:2,linkedTo:0,cx:400,cy:272.5,r:50,numberOfTeeth:15,tootheHeight:14},{id:3,linkedTo:0,cx:301,cy:78.5,r:50,numberOfTeeth:15,tootheHeight:14},{id:4,linkedTo:0,cx:301,cy:l,r:176,toothing:"internal",numberOfTeeth:55,tootheHeight:14}]];let d=null;r.subscribe(((e,o,n)=>{"selectedPreset"==e&&(d=[],i.removeDynamicllyRendered(),s[o].forEach(((e,n)=>{let l=s[o].find((t=>t.id==e.linkedTo));e.direction="driver"==e.role?1:-1*l.direction,e.renderer=h,e.devMode=r.getState("dev");let a=new t(e),c=translateIndexToLetter(n,!0),g=`gear_${c}`;if(s[o].find((e=>"internal"==e.toothing))){let e="external"==a.toothing?"driver"==a.role?"sun":"planet":"ring";i.dynamicRender(g,{type:"display-item",label:`- ${e} gear ${c}${a.numberOfTeeth}</span>`})}else i.dynamicRender(g,{type:"display-item",label:`- ${a.role} gear ${c}${a.numberOfTeeth}</span>`});a.addEventListener("fullRotation",(()=>{a.rotations+=1,i.updateValue(g,`${a.rotations} revs.`)})),d.push(a)}))),"dev"==e&&d.forEach((e=>e.devMode=o))})),r.setState("selectedPreset",0),r.setState("dev",!1),window.runningAnimations.add((()=>{h.clearRect(0,0,600,400),function(e,{canvasWidth:t,canvasHeight:i,devMode:r}){const o=!0===r?"#212125":"#5b55e1",n=25;drawRect(e,{x:0,y:0,width:t,height:i,fillColor:o}),drawGrid(e,{cellSize:25,lineThickness:.5,lineColor:"rgba(255, 255, 255, 0.01)"}),drawGrid(e,{cellSize:i/4,lineThickness:1,lineColor:"rgba(255, 255, 255, 0.04)"}),drawRect(e,{x:0,y:0,width:t,height:n,fillColor:o}),drawRect(e,{x:0,y:i-n+1,width:t,height:n,fillColor:o}),drawRect(e,{x:0,y:0,width:n,height:i,fillColor:o}),drawRect(e,{x:t-n+1,y:0,width:n,height:i,fillColor:o})}(h,{canvasWidth:600,canvasHeight:400,devMode:r.getState("dev")}),d.forEach(((e,t)=>{e.render();let i=r.getState("rotationSpeed")/10,o=e.getRotationSpeed(d);e.rotate(i*o)}))}))}});window.exportedObjects.push(r)})();