"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[690],{690:(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var a=r(540),o=r(823),n=r(31);function i(e,t,r){var a=document.querySelector("#root").querySelector("canvas"),o=a.getContext("2d");a.width=600,a.height=400;var i=function(e,r){o.clearRect(0,0,600,400);var a=(0,n.xd)(d,o,{type:r,method:e,width:600,height:400,color1:[(0,n.rV)(0,255),(0,n.rV)(0,255),(0,n.rV)(0,255)],color2:[(0,n.rV)(0,255),(0,n.rV)(0,255),(0,n.rV)(0,255)]}),i=a<1?"green-word-bubble":"yellow-word-bubble";t.updateValue("executeTime","<i class='".concat(i,"'>").concat(a.toFixed(1)," ms.</i>"))};function d(e,t){var r=t.color1,a=t.color2,o=t.width,i=t.height,d=t.type,l=t.method;if(0==(void 0===l?1:l)){for(var c=e.createImageData(o,i),u=a[0]-r[0],g=a[1]-r[1],s=a[2]-r[2],p=[0,0,0],h=0;h<i;h++)for(var b=0;b<o;b++){var m=4*(h*o+b),f=void 0;if(0==d?f=b/o:1==d?f=(0,n.lC)(o/2,i/2,b,h):2==d&&(f=(0,n.Q$)(o/2,i/2,b,h)*(i/2)/100/200),3==d){var y=(0,n.lC)(o/2,i/2,b,h);y<1/6?(p[0]=255,p[1]=Math.round(6*y*255),p[2]=0):y<2/6?(p[0]=Math.round(255-6*(y-1/6)*255),p[1]=255,p[2]=0):y<.5?(p[0]=0,p[1]=255,p[2]=Math.round(6*(y-2/6)*255)):y<4/6?(p[0]=0,p[1]=Math.round(255-6*(y-.5)*255),p[2]=255):y<5/6?(p[0]=Math.round(6*(y-4/6)*255),p[1]=0,p[2]=255):(p[0]=255,p[1]=0,p[2]=Math.round(255-6*(y-5/6)*255))}else p[0]=r[0]+u*f,p[1]=r[1]+g*f,p[2]=r[2]+s*f;c.data[m]=p[0],c.data[m+1]=p[1],c.data[m+2]=p[2],c.data[m+3]=255}e.putImageData(c,0,0)}else{var v;if(0==d?v=e.createLinearGradient(0,0,o,0):1==d?v=e.createConicGradient(0,o/2,i/2):2==d&&(v=e.createRadialGradient(o/2,i/2,20,o/2,i/2,i/2)),3==d){v=e.createConicGradient(300,o/2,i/2);var S=["red","rgb(251, 0, 84)","rgb(211, 0, 255)","rgb(160, 0, 255)","blue","rgb(17, 130, 255)","rgb(34, 255, 10)","yellow","orange","red"];S.forEach((function(e,t){var r=1/S.length*t;v.addColorStop(r,e)}))}else v.addColorStop(0,"rgba(".concat(r,", 1)")),v.addColorStop(1,"rgba(".concat(a,", 1)"));e.fillStyle=v,e.fillRect(0,0,o,i)}}r.setState("gradientRenderingMethod",0),r.setState("gradientTypeSelector",0),i(r.getState("gradientRenderingMethod"),r.getState("gradientTypeSelector")),r.subscribe((function(e,t,a){"regenerate"==e&&i(r.getState("gradientRenderingMethod"),r.getState("gradientTypeSelector"))}))}const d=function(e){var t=e.setDescription,r=e.setTags;return a.createElement(o.A,{title:"Static gradients",description:"Using built-in methods for drawing gradients obviously shows itself much better, compared to custom functions for rendering pixel by pixel.",tags:["color","performance","benchmark"],uiTree:{HUD:{},outputPanel:{executeTime:{type:"display-item",label:"Gradient rendered in"}},controlPanel:{gradientRenderingMethod:{type:"option-dropdown-list",label:"Rendering method",options:[{name:"pixel-by-pixel"},{name:"built-in"}],defaultValue:0},gradientTypeSelector:{type:"option-dropdown-list",label:"Type",options:[{name:"linear"},{name:"conical"},{name:"radial"},{name:"multicolor"}],defaultValue:1},regenerate:{type:"main-action-button",text:"Generate gradient"}}},code:i,setDescription:t,setTags:r})}}}]);